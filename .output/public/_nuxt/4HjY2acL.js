import{P as E,W as K}from"./Bp2l3kpD.js";import{_ as L,r as f,o as U,H as W,t as M,v as _,x as b,I as z,y as I,z as B}from"./DVNOL9sH.js";class O{constructor(){this.image=null,this.collision=!1}async loadImage(e){return new Promise(s=>{this.image=new Image,this.image.onload=()=>s(),this.image.src=e})}}class H{constructor(e,s,i){this.tiles=[],this.tileMap=[],this.maxScreenCol=e,this.maxScreenRow=s,this.tileSize=i,this.tiles=new Array(20).fill(null).map(()=>new O),this.tileMap=Array(e).fill(0).map(()=>Array(s).fill(0))}async loadTiles(){const s=[{path:"/map/SeRenta.png",collision:!0},{path:"/map/grass.png",collision:!0},{path:"/map/tree.png",collision:!0},{path:"/map/Peluqueria.png",collision:!0},{path:"/map/Bar.png",collision:!0},{path:"/map/roadNEWS.png",collision:!1},{path:"/map/roadNS.png",collision:!1},{path:"/map/Farmacia.png",collision:!0},{path:"/map/Fotostudio.png",collision:!0},{path:"/map/Panaderia.png",collision:!0},{path:"/map/Fruteria.png",collision:!0},{path:"/map/Musica.png",collision:!0},{path:"/map/Cafe.png",collision:!0},{path:null,collision:!1},{path:"/map/Internet.png",collision:!0},{path:"/map/roadEW.png",collision:!1},{path:"/map/roadSW.png",collision:!1},{path:"/map/roadNE.png",collision:!1},{path:"/map/roadSE.png",collision:!1},{path:"/map/roadNW.png",collision:!1},{path:"/map/tiendasD1.png",collision:!0},{path:"/map/tiendasAra.png",collision:!0}].map((i,a)=>i.path?new Promise(l=>{this.tiles[a]=new O,this.tiles[a].collision=i.collision,this.tiles[a].image=new Image,this.tiles[a].image.onload=()=>l(),this.tiles[a].image.src=i.path}):Promise.resolve());await Promise.all(s)}async loadMap(e){const s=e.trim().split(`
`);for(let i=0;i<this.maxScreenRow;i++){const a=s[i].trim().split(" ");for(let l=0;l<this.maxScreenCol;l++)this.tileMap[l][i]=parseInt(a[l])}}draw(e){for(let s=0;s<this.maxScreenRow;s++)for(let i=0;i<this.maxScreenCol;i++){const a=i*this.tileSize,l=s*this.tileSize,o=this.tileMap[i][s];this.tiles[o]&&this.tiles[o].image&&e.drawImage(this.tiles[o].image,a,l,this.tileSize,this.tileSize)}}getTileCollision(e,s){if(e<0||e>=this.maxScreenCol||s<0||s>=this.maxScreenRow)return!0;const i=this.tileMap[e][s];return this.tiles[i]?.collision??!1}}class N{constructor(){this.name="",this.image=null,this.collision=!1,this.x=0,this.y=0,this.scale=1}draw(e,s){if(this.image){const i=s.tileSize*.7,a=(s.tileSize-i)/2,l=(s.tileSize-i)/2;e.drawImage(this.image,this.x+a,this.y+l,i,i)}}}class $ extends N{constructor(e){super(),this.name="person",this.loadImage(e),this.active=!0}async loadImage(e){return new Promise(s=>{this.image=new Image,this.image.onload=()=>s(),this.image.src=`/person/${e}`})}}class F extends N{constructor(e){super(),this.name="obstacles",this.collision=!1,this.loadImage(e)}async loadImage(e){return new Promise(s=>{this.image=new Image,this.image.onload=()=>s(),this.image.src=`/objects/${e}`})}}class G{constructor(e){this.tileSize=e,this.objects=new Array(15).fill(null),this.personImages={p1:"PersonaCorbata.png",p2:"PersonaNaranja.png",p3:"mujer.png",p4:"mujer1.png",p5:"personaCampesino.png",p6:"personaEstudiante.png",p7:"personaVerde.png",p8:"tombo.png",p9:"tombo1.png"}}async setObjects(e=null){const s=e?this.processServerData(e):[],i=[{file:"huecos.png",x:6,y:6},{file:"motoEnElPiso.png",x:3,y:3},{file:"senal.png",x:9,y:11},{file:"senal1.png",x:9,y:10},{file:"senal2.png",x:8,y:9},{file:"senal3.png",x:9,y:9}],a=[];return s.forEach((l,o)=>{this.objects[o]=new $(l.file),this.objects[o].x=l.x*this.tileSize,this.objects[o].y=l.y*this.tileSize,this.objects[o].id=l.id,this.objects[o].active=!0,a.push(this.objects[o].loadImage(l.file))}),i.forEach((l,o)=>{const h=o+s.length;this.objects[h]=new F(l.file),this.objects[h].x=l.x*this.tileSize,this.objects[h].y=l.y*this.tileSize,a.push(this.objects[h].loadImage(l.file))}),await Promise.all(a),console.log("All images loaded"),console.log("Objects:",this.objects),this.objects}processServerData(e){return!e.persons||e.type!=="availablePersons"?(console.error("Invalid server data format"),[]):(console.log("Server data:",e),console.log("Server data persons:",e.persons),Object.entries(e.persons).map(([s,i])=>({file:this.personImages[s],x:i.x,y:i.y,id:i.id})))}}class V{constructor(e,s){this.tileSize=e,this.tileManager=s}checkTile(e){const s=e.x+e.solidArea.x,i=e.x+e.solidArea.x+e.solidArea.width,a=e.y+e.solidArea.y,l=e.y+e.solidArea.y+e.solidArea.height,o=Math.floor(s/this.tileSize),h=Math.floor(i/this.tileSize),r=Math.floor(a/this.tileSize),u=Math.floor(l/this.tileSize);let p,c;switch(e.direction){case"up":const m=Math.floor((a-e.speed)/this.tileSize);p=this.tileManager.tileMap[o][m],c=this.tileManager.tileMap[h][m],(this.tileManager.tiles[p]?.collision||this.tileManager.tiles[c]?.collision)&&(e.collisionOn=!0);break;case"down":const v=Math.floor((l+e.speed)/this.tileSize);p=this.tileManager.tileMap[o][v],c=this.tileManager.tileMap[h][v],(this.tileManager.tiles[p]?.collision||this.tileManager.tiles[c]?.collision)&&(e.collisionOn=!0);break;case"left":const P=Math.floor((s-e.speed)/this.tileSize);p=this.tileManager.tileMap[P][r],c=this.tileManager.tileMap[P][u],(this.tileManager.tiles[p]?.collision||this.tileManager.tiles[c]?.collision)&&(e.collisionOn=!0);break;case"right":const S=Math.floor((i+e.speed)/this.tileSize);p=this.tileManager.tileMap[S][r],c=this.tileManager.tileMap[S][u],(this.tileManager.tiles[p]?.collision||this.tileManager.tiles[c]?.collision)&&(e.collisionOn=!0);break}}checkObject(e,s,i=!1,a=null){let l=999;return s.forEach((o,h)=>{if(!o)return;const r={x:e.x+e.solidArea.x,y:e.y+e.solidArea.y,width:e.solidArea.width,height:e.solidArea.height},u={x:o.x+(o.solidArea?.x||0),y:o.y+(o.solidArea?.y||0),width:o.solidArea?.width||this.tileSize,height:o.solidArea?.height||this.tileSize};switch(e.direction){case"up":r.y-=e.speed;break;case"down":r.y+=e.speed;break;case"left":r.x-=e.speed;break;case"right":r.x+=e.speed;break}this.checkIntersect(r,u)&&(o.collision&&(e.collisionOn=!0),i&&(l=h),i&&a&&a.isConnected&&(e.hasPerson=!e.hasPerson,a.sendHasPersonUpdate(e.hasPerson)))}),l}checkIntersect(e,s){return e.x<s.x+s.width&&e.x+e.width>s.x&&e.y<s.y+s.height&&e.y+e.height>s.y}checkPlayerCollision(e,s){for(const i of s){if(!i||i.id===e.id)continue;const a={x:e.x+e.solidArea.x,y:e.y+e.solidArea.y,width:e.solidArea.width,height:e.solidArea.height};switch(e.direction){case"up":a.y-=e.speed;break;case"down":a.y+=e.speed;break;case"left":a.x-=e.speed;break;case"right":a.x+=e.speed;break}const l={x:i.x+i.solidArea.x,y:i.y+i.solidArea.y,width:i.solidArea.width,height:i.solidArea.height};if(this.checkIntersect(a,l))return e.collisionOn=!0,!0}return!1}}class X{constructor(){this.upPressed=!1,this.downPressed=!1,this.leftPressed=!1,this.rightPressed=!1,this.handleKeyDown=this.handleKeyDown.bind(this),this.handleKeyUp=this.handleKeyUp.bind(this)}init(){typeof window<"u"&&(window.addEventListener("keydown",this.handleKeyDown),window.addEventListener("keyup",this.handleKeyUp))}handleKeyDown(e){switch(e.key.toLowerCase()){case"w":this.upPressed=!0;break;case"s":this.downPressed=!0;break;case"a":this.leftPressed=!0;break;case"d":this.rightPressed=!0;break}}handleKeyUp(e){switch(e.key.toLowerCase()){case"w":this.upPressed=!1;break;case"s":this.downPressed=!1;break;case"a":this.leftPressed=!1;break;case"d":this.rightPressed=!1;break}}cleanup(){typeof window<"u"&&(window.removeEventListener("keydown",this.handleKeyDown),window.removeEventListener("keyup",this.handleKeyUp))}}const q={class:"game-container"},J={class:"game-hud"},Z={class:"score"},Y={class:"players-online"},Q={key:0,class:"collision-debug"},D={key:0,class:"collision-message"},ee=26,se=3,j=16,R=12,ie={__name:"GameCanvas",setup(w){const e=ee*se,s=e*j,i=e*R,a=f(new X),l=f(null),o=f(null),h=f(null),r=f(new E(s,i,e)),u=f(new Array(15).fill(null)),p=f(null),c=f(new K),m=f(new Map),v=f({lastCollision:null,debug:!1}),P=async()=>{h.value=new H(j,R,e),p.value=new V(e,h.value);const d=new G(e);c.value.onInitialData=async t=>{u.value=await d.setObjects(t)},c.value.setInitialDataCallback(async t=>{console.log("Initializing game with server data"),u.value=await d.setObjects(t)}),await Promise.all([h.value.loadTiles(),r.value.loadImages(),d.setObjects().then(t=>{u.value=t})]),await h.value.loadMap(`
    15 16 1 6 3 1 6 2 1 6 1 8 6 2 18 15
    1 6 2 6 21 14 6 1 4 6 20 1 6 1 6 2
    1 17 15 5 15 15 5 15 15 5 15 15 5 15 19 1
    2 9 0 6 1 7 6 1 3 6 1 8 6 4 1 0
    20 1 1 6 10 1 6 1 2 6 21 1 6 1 11 2
    15 15 15 5 15 15 5 15 15 5 15 15 5 15 15 15
    1 2 1 6 4 2 6 1 12 6 1 3 6 2 10 1
    3 1 11 6 1 14 6 1 1 6 7 1 6 1 2 1
    1 1 2 6 2 1 6 0 1 6 1 1 6 20 1 1
    1 18 15 5 15 15 5 15 15 5 15 15 5 15 16 9
    9 6 2 6 1 1 6 10 20 6 14 2 6 14 6 1
    15 19 1 6 12 2 6 1 1 6 1 1 6 1 17 15

`),c.value.onPlayersUpdate=async t=>{const g=c.value.getLocalPlayerId();if(t.type==="personState"){const n=t.personId,x=t.active,C=u.value.find(A=>A&&A.id===n);C&&(C.active=x,console.log(`ðŸŽ­ Person ${n} state updated to ${x} by player ${t.playerId}`));return}if(!m.value.has(t.id)&&t.id!==g){const n=new E(s,i,e,t.id);await n.loadImages(),m.value.set(t.id,n)}if(t.id!==g){const n=m.value.get(t.id);if(n){const x="hasPerson"in t&&n.hasPerson!==t.hasPerson;n.x=t.x??n.x,n.y=t.y??n.y,n.direction=t.direction??n.direction,x&&(n.hasPerson=t.hasPerson,n.getCurrentImage(),console.log("ðŸŽ® Player Update:",{id:t.id,hasPerson:t.hasPerson,timestamp:new Date().toISOString()}))}}},c.value.onPlayerDisconnect=t=>{m.value.delete(t)},c.value.onConnect=t=>{playerId.value=t,r.value.id=t}},S=()=>{const d=l.value.getContext("2d");d.clearRect(0,0,s,i),d.fillStyle="black",d.fillRect(0,0,s,i),h.value&&h.value.draw(d),console.log();const y=c.value.getLocalPlayerId(),t=[...m.value.values()].filter(g=>g.id!==y);t.sort((g,n)=>g.y-n.y);for(let g=0;g<i;g++)u.value.forEach(n=>{n&&n.y===g&&n.draw(d,{tileSize:e})}),t.forEach(n=>{Math.floor(n.y)===g&&n.draw(d)});r.value.draw(d)},T=()=>{if(r.value&&p.value){const d={up:a.value.upPressed,down:a.value.downPressed,left:a.value.leftPressed,right:a.value.rightPressed},y=[...m.value.values()];r.value.update(d,p.value,u.value,c.value,y)&&c.value.sendPlayerPosition({id:c.value.getLocalPlayerId(),x:r.value.x,y:r.value.y,direction:r.value.direction,hasPerson:r.value.hasPerson}),v.value.debug&&y.forEach(t=>{p.value.checkPlayerCollision(r.value,[t])&&(v.value.lastCollision={time:Date.now(),player1:r.value.id,player2:t.id})})}},k=()=>{T(),S(),o.value=requestAnimationFrame(k)};return U(async()=>{await P(),a.value.init(),c.value.connect(),k()}),W(()=>{a.value.cleanup(),c.value.disconnect(),o.value&&cancelAnimationFrame(o.value)}),(d,y)=>(_(),M("div",q,[b("canvas",{ref_key:"gameCanvas",ref:l,width:s,height:i},null,512),b("div",J,[b("span",Z,"Personas: "+I(r.value.hasPerson),1),b("span",Y,"Jugadores Online: "+I(m.value.size+1),1)]),v.value.debug?(_(),M("div",Q,[v.value.lastCollision?(_(),M("div",D," Â¡ColisiÃ³n detectada! Jugadores: "+I(v.value.lastCollision.player1)+" y "+I(v.value.lastCollision.player2),1)):z("",!0)])):z("",!0)]))}},ae=L(ie,[["__scopeId","data-v-f84a69d1"]]),te={class:"game-page"},le={__name:"page",setup(w){return(e,s)=>(_(),M("div",te,[B(ae)]))}},re=L(le,[["__scopeId","data-v-84cfa301"]]);export{re as default};
