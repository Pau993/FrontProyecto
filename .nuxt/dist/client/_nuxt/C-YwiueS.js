class p{constructor(){this.x=0,this.y=0,this.speed=0,this.direction="down",this.collisionOn=!1,this.solidArea={x:0,y:0,width:48,height:48},this.solidAreaDefaultX=this.solidArea.x,this.solidAreaDefaultY=this.solidArea.y,this.images={up:null,down:null,left:null,right:null,front:null,upLoaded:null,downLoaded:null,leftLoaded:null,rightLoaded:null,upLoadedTwo:null,downLoadedTwo:null,leftLoadedTwo:null,rightLoadedTwo:null},this.imagesLoaded=!1}async loadImage(e,s){return new Promise(i=>{const t=new Image;t.onload=()=>{this.images[e]=t,i()},t.src=s})}draw(e,s){const i=this.images[this.direction];i&&e.drawImage(i,this.x,this.y,s,s)}}class y extends p{constructor(e,s,i,t=null){super(),this.imagesLoaded=!1,this.id=t,this.name=`Player-${t||"local"}`,this.x=100,this.y=100,this.speed=4,this.direction="down",this.hasPerson=0,this.tileSize=i,this.isLocal=!t,this.screenWidth=e,this.screenHeight=s,this.tileSize=i,this.solidArea={x:10,y:10,width:45,height:60},this.solidAreaDefaultX=this.solidArea.x,this.solidAreaDefaultY=this.solidArea.y,this.lastUpdate=Date.now(),this.needsUpdate=!1,this.images={}}async loadImages(){const e=[{key:"up",path:"/player/aliUp.png"},{key:"down",path:"/player/down.png"},{key:"left",path:"/player/AlimentadorIzq.png"},{key:"right",path:"/player/AlimentadorDer.png"},{key:"upLoadedTwo",path:"/player/TransmiUp.png"},{key:"downLoadedTwo",path:"/player/TransmiDown.png"},{key:"leftLoadedTwo",path:"/player/TransmiIzq.png"},{key:"rightLoadedTwo",path:"/player/TransmiDer.png"},{key:"upLoaded",path:"/player/SitpUp.png"},{key:"downLoaded",path:"/player/SitpDown.png"},{key:"leftLoaded",path:"/player/SitpIzq.png"},{key:"rightLoaded",path:"/player/SitpDer.png"}];try{await Promise.all(e.map(async({key:s,path:i})=>{const t=new Image;t.src=i,await new Promise((o,n)=>{t.onload=o,t.onerror=n}),this.images[s]=t})),this.imagesLoaded=!0,console.log("Images loaded successfully for player:",this.id)}catch(s){console.error("Error loading images for player:",this.id,s)}}draw(e){if(!this.imagesLoaded){this.loadImages().catch(console.error);return}try{const s=this.getCurrentImage();if(!s){console.warn("No image available for direction:",this.direction);return}e.save(),e.drawImage(s,this.x,this.y,this.tileSize,this.tileSize),this.isLocal||(e.strokeStyle="rgba(255, 0, 0, 0.5)",e.strokeRect(this.x,this.y,this.tileSize,this.tileSize)),e.font="12px Arial";const i=this.isLocal?`${this.name} (You)`:this.name,t=e.measureText(i).width;e.fillStyle="rgba(0, 0, 0, 0.7)",e.fillRect(this.x+this.tileSize/2-t/2-2,this.y-20,t+4,16),e.fillStyle=this.isLocal?"#00ff00":"#ffffff",e.textAlign="center",e.fillText(i,this.x+this.tileSize/2,this.y-8),this.hasPerson>0&&this.drawPersonCount(e),e.restore()}catch(s){console.error("Error drawing player:",s,this)}}updateFromNetwork(e){if(!this.isLocal)try{if(e.x!==void 0){this.x=Number(e.x),this.y=Number(e.y),this.direction=e.direction,this.hasPerson=Number(e.hasPerson||0);return}if(e.type==="positions"&&e.players){const s=e.players[this.id];s&&(this.x=Number(s.x),this.y=Number(s.y),this.direction=s.direction,this.hasPerson=Number(s.hasPerson||0))}}catch(s){console.error("Error updating player from network:",s)}}getCurrentImage(){if(!this.images||!this.direction)return null;const e=this.direction.toLowerCase();return this.hasPerson>=5?this.images[`${e}LoadedTwo`]||this.images[e]:this.hasPerson>=3?this.images[`${e}Loaded`]||this.images[e]:this.images[e]}drawPersonCount(e){e.fillStyle="rgba(0, 0, 0, 0.7)",e.beginPath(),e.arc(this.x+this.tileSize-5,this.y-5,7,0,Math.PI*2),e.fill(),e.fillStyle=this.hasPerson>=5?"#ff0000":"#ffff00",e.beginPath(),e.arc(this.x+this.tileSize-5,this.y-5,5,0,Math.PI*2),e.fill(),e.fillStyle="#000000",e.textAlign="center",e.fillText(this.hasPerson.toString(),this.x+this.tileSize-5,this.y-3)}update(e,s,i,t=null){if(!this.isLocal)return;const o=this.x,n=this.y,d=this.direction,c=this.hasPerson;this.collisionOn=!1;let r=!1;if(e.up?(this.direction="up",r=!0):e.down?(this.direction="down",r=!0):e.left?(this.direction="left",r=!0):e.right&&(this.direction="right",r=!0),r){s.checkTile(this);const l=s.checkObject(this,i,!0);if(l!==999&&this.pickUpObject(l,i,t),!this.collisionOn)switch(this.direction){case"up":this.y-=this.speed;break;case"down":this.y+=this.speed;break;case"left":this.x-=this.speed;break;case"right":this.x+=this.speed;break}this.x=Math.max(0,Math.min(this.x,this.screenWidth-this.tileSize)),this.y=Math.max(0,Math.min(this.y,this.screenHeight-this.tileSize))}return this.needsUpdate=o!==this.x||n!==this.y||d!==this.direction||c!==this.hasPerson,this.needsUpdate&&(this.lastUpdate=Date.now()),this.needsUpdate}updateFromNetwork(e){if(!this.isLocal)try{if(e.type==="positions"&&e.players){const s=e.players[this.id];if(s){const i=Number(s.x),t=Number(s.y),o=.3;this.x=this.x+(i-this.x)*o,this.y=this.y+(t-this.y)*o,this.direction=s.direction,this.hasPerson=Number(s.hasPerson||0),this.needsUpdate=!0}this.getCurrentImage()}}catch(s){console.error("Error updating player from network:",s)}}getNetworkState(){return{id:this.id,x:Math.round(this.x),y:Math.round(this.y),direction:this.direction,hasPerson:this.hasPerson,name:this.name,timestamp:Date.now()}}pickUpObject(e,s,i=null){if(e!==999&&s[e]){const t=this.hasPerson;s[e].name==="person"?(this.hasPerson++,s[e]=null):s[e].name==="obstacles"&&(this.hasPerson--,s[e]=null),t!==this.hasPerson&&i&&(i.sendHasPersonUpdate(this.hasPerson),console.log("HasPerson changed:",{old:t,new:this.hasPerson}))}}}class a{static HOST="localhost:8080";static RECONNECT_DELAY=5e3;static MAX_RETRIES=3;constructor(){this.socket=null,this.isConnected=!1,this.onPlayersUpdate=null,this.connectionAttempts=0,this.pendingMessages=[],this.sessionId=null,this.localPlayerId=null}receiveWebSocketData(){this.socket.onmessage=e=>{try{const s=JSON.parse(e.data);if(console.log("📩 WebSocket Data Received:",{timestamp:new Date().toISOString(),data:s}),s.players&&console.log("🎮 Players Update:",s.players),s.type)switch(console.log(`Message Type: ${s.type}`),s.type){case"playerUpdate":console.log("Player Update:",{id:s.id,position:{x:s.x,y:s.y},direction:s.direction,hasPerson:s.hasPerson});break;case"playerJoin":console.log("New Player Joined:",s.id);break;case"playerDisconnect":console.log("Player Disconnected:",s.id);break}this.handleMessage(e)}catch(s){console.error("Error processing WebSocket data:",s)}}}connect(){if(this.connectionAttempts>=a.MAX_RETRIES){console.error("Max reconnection attempts reached");return}try{this.socket&&this.socket.readyState!==WebSocket.CLOSED&&this.socket.close(),console.log(`Connecting to WebSocket... (Attempt ${this.connectionAttempts+1})`),this.socket=new WebSocket(`ws://${a.HOST}/game`),this.socket.onopen=()=>{console.log("WebSocket Connected"),this.isConnected=!0,this.connectionAttempts=0,this.sendPlayerData({type:"playerJoin",timestamp:Date.now()}),this.processQueuedMessages()},this.socket.onmessage=e=>{this.handleMessage(e)},this.socket.onclose=e=>{console.warn(`Connection closed: ${e.code}`),this.isConnected=!1,e.code!==1e3&&this.handleReconnect()},this.socket.onerror=e=>{console.error("WebSocket Error:",e),this.isConnected=!1,this.handleReconnect()}}catch(e){console.error("Connection error:",e),this.handleReconnect()}}handleMessage(e){try{const s=JSON.parse(e.data);if(console.log("Received message:",s),s.type==="PLAYER_ID"){this.setLocalPlayerId(s.playerId),console.log("🎮 Local Player ID received:",this.localPlayerId);return}if(s.type==="positions"&&s.players){console.log("Positions Update Received"),Object.entries(s.players).forEach(([i,t])=>{this.onPlayersUpdate&&this.onPlayersUpdate({type:"playerUpdate",id:i,x:t.x||0,y:t.y||0,direction:t.direction||"right",sprite:"bus"})});return}if(s.error){console.error(" Server Error:",s.error);return}if(!s.type){console.error("Invalid message format:",s);return}switch(s.type){case"playerUpdate":this.onPlayersUpdate&&this.onPlayersUpdate({type:"playerUpdate",id:s.id,x:s.x||0,y:s.y||0,direction:s.direction||"right"});break;case"personUpdate":if(s.playerId===this.localPlayerId){console.log("📍 Skipping local player update:",{playerId:s.playerId,hasPerson:s.hasPerson});return}this.onPlayersUpdate&&this.onPlayersUpdate({type:"playerUpdate",id:s.playerId,hasPerson:parseInt(s.hasPerson,10)}),console.group("Players Debug Info"),console.log("Local Player:",{id:this.localPlayerId,timestamp:new Date().toISOString()}),console.log("Update Received:",{playerId:s.playerId,hasPerson:s.hasPerson,timestamp:new Date().toISOString()}),console.log("Connected Players:",{total:this.onPlayersUpdate?"Available":"No callback set",updateReceived:!0,messageType:"personUpdate"}),console.groupEnd();break;case"playerDisconnect":this.onPlayersUpdate&&this.onPlayersUpdate({type:"playerDisconnect",id:s.id});break;default:console.warn(" Unknown message type:",s.type)}}catch(s){console.error(" Error parsing message:",s,"Raw message:",e.data)}}handleClose(e){this.isConnected=!1,console.log(`Connection closed: ${e.code}`),e.code!==1e3&&this.handleReconnect()}handleError(e){console.error("WebSocket Error:",e),this.isConnected=!1}processQueuedMessages(){for(;this.pendingMessages.length>0;){const e=this.pendingMessages.shift();this.sendPlayerData(e)}}sendPlayerData(e){if(!this.isConnected||!this.socket||this.socket.readyState!==WebSocket.OPEN){this.pendingMessages.push(e);return}try{const s=JSON.stringify({...e,timestamp:Date.now()});this.socket.send(s)}catch(s){console.error("Error sending player data:",s),this.pendingMessages.push(e),this.handleReconnect()}}sendPlayerPosition(e){const s={type:"playerUpdate",id:e.id,x:e.x,y:e.y,direction:e.direction};this.sendPlayerData(s)}sendHasPersonUpdate(e){const s={type:"personUpdate",id:this.localPlayerId,hasPerson:String(e)};this.sendPlayerData(s),console.log("📤 Sending hasPerson update:",{playerId:this.localPlayerId,hasPerson:e})}handleReconnect(){if(this.connectionAttempts++,this.connectionAttempts<a.MAX_RETRIES){const e=a.RECONNECT_DELAY*this.connectionAttempts;console.log(`Reconnecting in ${e/1e3}s...`),setTimeout(()=>this.connect(),e)}}setPlayersUpdateCallback(e){this.onPlayersUpdate=e}disconnect(){this.socket&&(this.socket.close(1e3,"Client disconnecting"),this.socket=null,this.isConnected=!1,this.connectionAttempts=0)}getLocalPlayerId(){return this.localPlayerId}setLocalPlayerId(e){this.localPlayerId=e,console.log("Local Player ID set:",e)}}export{y as P,a as W};
